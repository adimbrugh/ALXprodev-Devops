#!/bin/bash

# Setup
DATA_DIR="Advanced_shell/pokemon_data"
mkdir -p "$DATA_DIR"
cd Advanced_shell || exit 1

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors_parallel.txt"
> "$ERROR_FILE"

TIMEOUT=10  # seconds

# Function to fetch Pok√©mon with timeout control
fetch_pokemon() {
  local pokemon=$1
  local file_path="$DATA_DIR/${pokemon}.json"

  # Start curl in the background
  (
    curl -s -w "%{http_code}" -o "$file_path" "$API_URL/$pokemon" > "$file_path.status"
  ) &
  local pid=$!
  
  # Wait for the curl process up to TIMEOUT seconds
  ( sleep "$TIMEOUT" && kill -0 "$pid" 2>/dev/null && kill "$pid" && echo "‚è∞ Timeout: $pokemon fetch killed." >> "$ERROR_FILE" ) &
  local watchdog=$!

  # Wait for curl to finish
  wait "$pid"
  curl_exit_code=$?

  # Kill watchdog if curl finishes first
  kill "$watchdog" 2>/dev/null

  # Process result
  if [ $curl_exit_code -eq 0 ]; then
    status=$(<"$file_path.status")
    rm -f "$file_path.status"
    if [ "$status" -eq 200 ]; then
      echo "‚úÖ $pokemon downloaded successfully."
    else
      echo "‚ùå Error fetching $pokemon (HTTP $status)" >> "$ERROR_FILE"
      rm -f "$file_path"
    fi
  else
    echo "‚ùå curl failed for $pokemon (exit code $curl_exit_code)" >> "$ERROR_FILE"
    rm -f "$file_path"
  fi
}

# Loop through Pok√©mon in parallel
for pokemon in "${POKEMON_LIST[@]}"; do
  fetch_pokemon "$pokemon" &
done

# Wait for all fetches
wait

# Final output
echo -e "\nAll downloads complete."

if [ -s "$ERROR_FILE" ]; then
  echo "‚ö†Ô∏è  Some errors occurred. Check $ERROR_FILE"
else
  echo "üéâ All Pok√©mon data fetched successfully with no errors."
fi
